{"version":3,"file":"static/js/2582.36ea2c61.chunk.js","mappings":"4KAKMA,GAAeC,EAAAA,EAAAA,OAAK,kBAAM,8FAAN,IACpBC,GAAUD,EAAAA,EAAAA,OAAK,kBAAM,uDAAN,IACfE,GAAsBF,EAAAA,EAAAA,OAAK,kBAAM,0EAAN,IAC3BG,GAAcH,EAAAA,EAAAA,OAAK,kBAAM,iEAAN,IAsDzB,UApD2B,WAEzB,IAAQI,GAAeC,EAAAA,EAAAA,MAAfD,WAEUE,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAAnCC,UAGDC,GAAuBC,EAAAA,EAAAA,YAC3BL,EAASM,KAAI,SAACC,GACZ,MAAO,CACLC,SAAU,CAAC,QAAS,CAAEC,GAAIF,IAC1BG,QAASC,EAAAA,GAEZ,KAKH,GAFkBP,EAAqBQ,MAAK,SAACC,GAAD,OAAuB,IAAhBA,EAAEC,SAAT,IAG1C,OAAU,SAAC,EAAAC,SAAD,CAAUC,UAAU,+CAApB,UAAkD,SAACrB,EAAD,MAG9D,IAAMsB,EAASb,EAAqBE,KAAI,SAACY,GAEvC,OADAA,EAAEC,KAAKC,UAAYF,EAAEC,KAAKE,OAAOf,KAAI,SAAAgB,GAAC,OAAIA,EAAEb,EAAN,IAC/BS,EAAEC,IACV,IAID,OACE,SAAC,EAAAJ,SAAD,CAAUC,UAAU,kDAApB,UAEQ,SAACvB,EAAD,CACA8B,MAAM,kBACNN,OAAQA,EACRO,OAAQ,SAACC,GACP,OACE,iCACE,SAAC7B,EAAD,CAAqB6B,MAAOA,KAC5B,SAAC5B,EAAD,CAAa4B,MAAOA,MAGzB,EACDC,KAAK,oBACL5B,WAAYA,KAMvB,C","sources":["pages/favoriteMoviesPage.js"],"sourcesContent":["import React, { useContext, lazy, Suspense  } from \"react\";\nimport { MoviesContext } from \"../contexts/moviesContext\";\nimport { useQueries } from \"react-query\";\nimport { getMovie } from \"../api/tmdb-api\";\nimport { useParams } from \"react-router-dom\";\nconst PageTemplate = lazy(() => import(\"../components/templateMovieListPage\"));\nconst Spinner = lazy(() => import(\"../components/spinner\"));\nconst RemoveFromFavorites = lazy(() => import(\"../components/cardIcons/removeFromFavorites\"));\nconst WriteReview = lazy(() => import(\"../components/cardIcons/writeReview\"));\n\nconst FavoriteMoviesPage = () => {\n\n  const { pagination } = useParams();\n\n  const {favorites: movieIds } = useContext(MoviesContext);\n\n  // Create an array of queries and run in parallel.\n  const favoriteMovieQueries = useQueries(\n    movieIds.map((movieId) => {\n      return {\n        queryKey: [\"movie\", { id: movieId }],\n        queryFn: getMovie,\n      };\n    })\n  );\n  // Check if any of the parallel queries is still loading.\n  const isLoading = favoriteMovieQueries.find((m) => m.isLoading === true);\n\n  if (isLoading) {\n    return    <Suspense fallback={<h1>Loading Componment</h1>}>{<Spinner />}</Suspense>;\n  }\n\n  const movies = favoriteMovieQueries.map((q) => {\n    q.data.genre_ids = q.data.genres.map(g => g.id)\n    return q.data\n  });\n\n  // const toDo = () => true;\n\n  return (\n    <Suspense fallback={<h1>Building PageTemplate</h1>}>\n      {\n            <PageTemplate\n            title=\"Favorite Movies\"\n            movies={movies}\n            action={(movie) => {\n              return (\n                <>\n                  <RemoveFromFavorites movie={movie} />\n                  <WriteReview movie={movie} />\n                </>\n              );\n            }}\n            page=\"/movies/favorites\"\n            pagination={pagination}\n          />\n      }\n    </Suspense>\n\n  );\n};\n\nexport default FavoriteMoviesPage;"],"names":["PageTemplate","lazy","Spinner","RemoveFromFavorites","WriteReview","pagination","useParams","movieIds","useContext","MoviesContext","favorites","favoriteMovieQueries","useQueries","map","movieId","queryKey","id","queryFn","getMovie","find","m","isLoading","Suspense","fallback","movies","q","data","genre_ids","genres","g","title","action","movie","page"],"sourceRoot":""}